# Example settings for email (configure as needed)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.example.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'your_email@example.com'
EMAIL_HOST_PASSWORD = 'your_email_password'
DEFAULT_FROM_EMAIL = 'your_email@example.com'


from django.core.mail import send_mail
from django.conf import settings
from django.contrib import messages
from django.shortcuts import redirect, render
from .models import Ticket, Concert
from django.utils.html import strip_tags

def book_ticket(request, concert_id):
    concert = Concert.objects.get(id=concert_id)
    if request.method == "POST":
        buyer_name = request.POST.get("name")
        email = request.POST.get("email")
        quantity = int(request.POST.get("quantity")) 
        total_price = concert.price * quantity

        # Create the ticket record
        ticket = Ticket.objects.create(
            concert=concert, 
            buyer_name=buyer_name, 
            email=email, 
            quantity=quantity,
            total_price=total_price
        )

        # Send booking confirmation email to the user
        subject = f"Your Ticket Booking for {concert.name}"
        message = f"""
        Hi {buyer_name},

        Thank you for booking your ticket(s) for the concert '{concert.name}'.

        Details:
        Concert: {concert.name}
        Quantity: {quantity}
        Total Price: ${total_price:.2f}
        Booking Confirmation: Your ticket(s) are confirmed and will be sent to you soon.

        Best regards,
        The Concert Team
        """
        
        send_mail(
            subject,
            message,
            settings.DEFAULT_FROM_EMAIL,
            [email],
            fail_silently=False,
        )

        # Success message for the user
        messages.success(request, f"Ticket booked successfully! Total price: {total_price:.2f}")
        return redirect(user_home)

    return render(request, 'user/book_ticket.html', {'concert': concert})



Optional HTML Email
If you want to send HTML-formatted emails (e.g., for better styling), you can use send_mail with html_message:

python
Copy
html_message = """
<html>
  <body>
    <h2>Booking Confirmation</h2>
    <p>Hi {buyer_name},</p>
    <p>Thank you for booking your ticket(s) for the concert '<strong>{concert.name}</strong>'.</p>
    <p><strong>Details:</strong></p>
    <ul>
        <li>Concert: {concert.name}</li>
        <li>Quantity: {quantity}</li>
        <li>Total Price: ${total_price:.2f}</li>
    </ul>
    <p>Your ticket(s) are confirmed and will be sent to you soon.</p>
    <p>Best regards,<br>The Concert Team</p>
  </body>
</html>
"""

send_mail(
    subject,
    strip_tags(html_message),  # strip_tags removes HTML tags for text-only emails
    settings.DEFAULT_FROM_EMAIL,
    [email],
    html_message=html_message,
    fail_silently=False,
)
          



from django.utils import timezone

class Booking(models.Model):
    product = models.ForeignKey(products, on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE)  # Assuming the user is logged in
    booking_date = models.DateTimeField(auto_now_add=True)
    buyer_name = models.CharField(max_length=100)
    email = models.EmailField()
    canceled = models.BooleanField(default=False)  # Track if the booking is canceled
    cancellation_date = models.DateTimeField(null=True, blank=True)  # Track cancellation date

    def cancel(self):
        """Cancel the booking and set cancellation date."""
        self.canceled = True
        self.cancellation_date = timezone.now()
        self.save()

    def __str__(self):
        return f"Booking for {self.product.name} by {self.buyer_name} on {self.booking_date}"



        from django.shortcuts import get_object_or_404, redirect
from django.contrib import messages
from .models import Booking

def cancel_booking(request, booking_id):
    """Handle booking cancellation."""
    # Get the booking object or return 404 if not found
    booking = get_object_or_404(Booking, id=booking_id, user=request.user)

    # Check if the booking has already been canceled
    if booking.canceled:
        messages.error(request, 'This booking has already been canceled.')
    else:
        # Cancel the booking
        booking.cancel()
        messages.success(request, 'Your booking has been successfully canceled.')

    # Redirect the user back to their booking page
    return redirect('user_tickets')  # Assuming the user_tickets page shows all the bookings


    {% for booking in bookings %}
    <tr>
        <td>{{ booking.product.name }}</td>
        <td>{{ booking.buyer_name }}</td>
        <td>{{ booking.email }}</td>
        <td>{{ booking.booking_date }}</td>
        <td>
            {% if not booking.canceled %}
                <form action="{% url 'cancel_booking' booking.id %}" method="post">
                    {% csrf_token %}
                    <button type="submit" class="cancel-btn">Cancel Booking</button>
                </form>
            {% else %}
                <span>Booking Canceled</span>
            {% endif %}
        </td>
    </tr>
{% endfor %}



from django.urls import path
from . import views

urlpatterns = [
    # Other routes...
    path('cancel_booking/<int:booking_id>/', views.cancel_booking, name='cancel_booking'),
]





<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recommended Artists</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>

    <div class="recommended-artists">
        <h2>Recommended Artists</h2>
        <div class="artist-list">
            <div class="artist"><img src="bts.png" alt="BTS"><p>BTS</p></div>
            <div class="artist"><img src="txt.png" alt="TXT"><p>TOMORROW X TOGETHER</p></div>
            <div class="artist"><img src="gfriend.png" alt="GFRIEND"><p>GFRIEND</p></div>
            <div class="artist"><img src="seventeen.png" alt="SEVENTEEN"><p>SEVENTEEN</p></div>
            <div class="artist"><img src="enhypen.png" alt="ENHYPEN"><p>ENHYPEN</p></div>
        </div>
        
        <div class="search-container">
            <input type="text" id="artistSearch" placeholder="Search Artist">
            <button onclick="searchArtist()">Search</button>
        </div>
    </div>

    <script>
        function searchArtist() {
            let searchQuery = document.getElementById("artistSearch").value;
            alert("Searching for: " + searchQuery);
        }
    </script>

</body>
</html>
body {
    font-family: Arial, sans-serif;
    background-color: #f8f8f8;
    text-align: center;
}

.recommended-artists {
    width: 80%;
    margin: 20px auto;
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
}

.artist-list {
    display: flex;
    justify-content: center;
    gap: 15px;
    flex-wrap: wrap;
}

.artist {
    text-align: center;
}

.artist img {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    border: 2px solid #ddd;
    padding: 5px;
}

.artist p {
    font-size: 14px;
    margin-top: 5px;
}

.search-container {
    margin-top: 20px;
}

.search-container input {
    padding: 10px;
    width: 200px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

.search-container button {
    padding: 10px 15px;
    background-color: #007BFF;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

.search-container button:hover {
    background-color: #0056b3;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Recommended Artists</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .artist-card {
            text-align: center;
        }
        .artist-card img {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            border: 2px solid #ddd;
            padding: 5px;
        }
    </style>
</head>
<body>

<div class="container mt-5">
    <h2 class="text-center">Recommended Artists</h2>
    <div class="row justify-content-center mt-3">
        <div class="col-md-2 col-4 artist-card">
            <img src="bts.png" alt="BTS">
            <p>BTS</p>
        </div>
        <div class="col-md-2 col-4 artist-card">
            <img src="txt.png" alt="TXT">
            <p>TOMORROW X TOGETHER</p>
        </div>
        <div class="col-md-2 col-4 artist-card">
            <img src="gfriend.png" alt="GFRIEND">
            <p>GFRIEND</p>
        </div>
        <div class="col-md-2 col-4 artist-card">
            <img src="seventeen.png" alt="SEVENTEEN">
            <p>SEVENTEEN</p>
        </div>
        <div class="col-md-2 col-4 artist-card">
            <img src="enhypen.png" alt="ENHYPEN">
            <p>ENHYPEN</p>
        </div>
    </div>

    <!-- Search Bar -->
    <div class="row justify-content-center mt-4">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" id="artistSearch" placeholder="Search Artist">
                <button class="btn btn-primary" onclick="searchArtist()">Search</button>
            </div>
        </div>
    </div>
</div>

<script>
    function searchArtist() {
        let searchQuery = document.getElementById("artistSearch").value;
        alert("Searching for: " + searchQuery);
    }
</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>









def address_page(req, id):
    cake = Cake.objects.get(id=id)
    user = User.objects.get(username=req.session['user'])  

    user_address = Address.objects.filter(user=user).order_by('-id').first()

    if req.method == 'POST':
        name = req.POST.get('name')
        address = req.POST.get('address')
        phone_number = req.POST.get('phone_number')
        Address.objects.filter(user=user).update(name=name, address=address, phone_number=phone_number)

        req.session['cake']=id

        return redirect(order_payment) 

    return render(req, 'user/order_details.html', {
        'cake': cake,
        'user_address': user_address  
    })


@login_required
def order_payment(req):
    if 'user' in req.session:
        user = get_object_or_404(User, username=req.session['user'])
        cake = Cake.objects.get(pk=req.session['cake'])
        amount = cake.price
        print(cake)

        razorpay_client = razorpay.Client(auth=(settings.RAZORPAY_KEY_ID, settings.RAZORPAY_KEY_SECRET))

        razorpay_order = razorpay_client.order.create({
            "amount": int(amount) * 100, 
            "currency": "INR",    

            "payment_capture": "1"
        })

        order_id=razorpay_order['id']
        order = Order.objects.create(
            user=user,
            price=amount,
            provider_order_id=razorpay_order['id']
        )
        order.save()
        req.session['order_id'] = order.pk

        return render(req, "user/payment.html", {
            "callback_url": "http://127.0.0.1:8000/callback/",
            "razorpay_key": settings.RAZORPAY_KEY_ID,
            "order": order,
        })
    else:
        return redirect('login')


@login_required
def pay(req):
    user = get_object_or_404(User, username=req.session['user'])
    cake = Cake.objects.get(pk=req.session['cake'])


    if not cake:
        messages.error(req, "Your cart is empty. Please add a cake first.")
        return redirect('cart_display')

    cake = cake
    quantity = int(req.GET.get('quantity', 1))
    order_id = req.session.get('order_id')
    order = get_object_or_404(Order, pk=order_id) if order_id else None
    print(cake)


    if req.method == 'GET':
        user_address = Address.objects.filter(user=user).order_by('-id').first()

        data = Buy.objects.create(
            user=user,
            cake=cake,
            price=cake.price * quantity,  
            address=user_address,
            order=order
        )
        data.save()

        return redirect(view_bookings)

    return render(req, 'user/view_bookings.html')



@csrf_exempt
def callback(request):
    def verify_signature(response_data):
        client = razorpay.Client(auth=(settings.RAZORPAY_KEY_ID, settings.RAZORPAY_KEY_SECRET))
        return client.utility.verify_payment_signature(response_data)

    if "razorpay_signature" in request.POST:
        payment_id = request.POST.get("razorpay_payment_id", "")
        provider_order_id = request.POST.get("razorpay_order_id", "")
        signature_id = request.POST.get("razorpay_signature", "")

        order = Order.objects.get(provider_order_id=provider_order_id)
        order.payment_id = payment_id
        order.signature_id = signature_id

        if verify_signature(request.POST):
            order.status = PaymentStatus.SUCCESS
        else:
            order.status = PaymentStatus.FAILURE

        order.save()
        return redirect(pay)
    

    else:
        payment_data = json.loads(request.POST.get("error[metadata]", "{}"))
        provider_order_id = payment_data.get("order_id", "")
        order = Order.objects.get(provider_order_id=provider_order_id)
        order.status = PaymentStatus.FAILURE
        order.save()

        return redirect(pay)




        class Address(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    name = models.CharField(max_length=255)
    address = models.TextField()
    phone_number = models.CharField(max_length=20)    


class Order(models.Model):
    user=models.ForeignKey(User,on_delete=models.CASCADE)
    price=models.IntegerField()
    status=CharField(
        _("Payment Status"),
        default=PaymentStatus.PENDING,
        max_length=254,
        blank=False,
        null=False
    )
    provider_order_id = models.CharField(
        _("Order ID"), max_length=40, null=False,blank=False
    )
    payment_id = models.CharField(
        _("Payment ID"),max_length=36, null=False, blank=False
    )
    signature_id = models.CharField(
        _("Signature ID"), max_length=128, null=False, blank=False
    )

class Buy(models.Model):
    user=models.ForeignKey(User,on_delete=models.CASCADE)
    cake=models.ForeignKey(Cake,on_delete=models.CASCADE)
    price=models.IntegerField()
    quantity = models.PositiveIntegerField(default=1)  
    date=models.DateField(auto_now_add=True)
    address = models.ForeignKey(Address, on_delete=models.CASCADE)
    is_confirmed = models.BooleanField(default=False)
    order=models.ForeignKey(Order,on_delete=models.CASCADE,null=True)

    def __str__(self):
        return self.name 




        def address_page(req, id):
    product = Jewelry.objects.get(pk=id)
    if req.method == 'POST':
        name = req.POST.get('name')
        address = req.POST.get('address')
        phone_number = req.POST.get('phone_number')
        size = req.POST.get('size', 10)  # If size is provided, use it, otherwise default to 10
        
        # Save the address
        user_address = Address.objects.create(
            user=req.user, 
            name=name, 
            address=address, 
            phone_number=phone_number,
            size=size  
        )

        price = int(product.price)  
        data = Buy.objects.create(user=req.user, product=product, price=price)

        return redirect(user_home) 

    return render(req, 'user/user_dtls.html', {'product': product})

def place_order(req, id):
    product = Jewelry.objects.get(pk=id)
    user = req.user 
    price = int(product.price)  
    size = req.POST.get('size', 10)  
    data = Buy.objects.create(
        user=user, 
        product=product, 
        price=price,
        size=size 
    )
    
    return redirect(user_home)  






    class Order(models.Model):
    user=models.ForeignKey(User,on_delete=models.CASCADE)
    price=models.IntegerField()
    status=CharField(
        _("Payment Status"),
        default=PaymentStatus.PENDING,
        max_length=254,
        blank=False,
        null=False
    )
    provider_order_id = models.CharField(
        _("Order ID"), max_length=40, null=False,blank=False
    )
    payment_id = models.CharField(
        _("Payment ID"),max_length=36, null=False, blank=False
    )
    signature_id = models.CharField(
        _("Signature ID"), max_length=128, null=False, blank=False
    )

class Buy(models.Model):
    user=models.ForeignKey(User,on_delete=models.CASCADE)
    product=models.ForeignKey(products,on_delete=models.CASCADE)
    price=models.IntegerField()
    date=models.DateField(auto_now_add=True)   
    quantity = models.PositiveIntegerField(default=1) 
    address = models.ForeignKey(Booking, on_delete=models.CASCADE, null=True)  # Make it nullable
    # address = models.ForeignKey(Address, on_delete=models.CASCADE)
    is_confirmed = models.BooleanField(default=False)
    order=models.ForeignKey(Order,on_delete=models.CASCADE,null=True)  