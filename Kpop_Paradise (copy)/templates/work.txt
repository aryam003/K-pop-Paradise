[10:31 pm, 03/02/2025] Arya: 

from django.db import models

class Band(models.Model):
    name = models.CharField(max_length=100, unique=True)
    image = models.ImageField(upload_to='bands/', null=True, blank=True)
    description = models.TextField()

    def _str_(self):
        return self.name

class Concert(models.Model):
    band = models.ForeignKey(Band, on_delete=models.CASCADE, related_name="concerts")
    artist = 
    date = models.DateField()
    location = models.CharField(max_length=200)
    price = models.DecimalField(max_digits=8, decimal_places=2)

    def _str_(self):
        return f"{self.band.name} - {self.location} on {self.date}"

class Ticket(models.Model):
    concert = models.ForeignKey(Concert, on_delete=models.CASCADE, related_name="tickets")
    buyer_name = models.CharField(max_length=100)
    email = models.EmailField()
    quantity = models.PositiveIntegerField()

    def _str_(self):
        return f"{self.buyer_name} - {self.concert.band.name}"
[10:33 pm, 03/02/2025] Arya:
------------------------------------------------------------------------------------------------------------------------------------------


from django.shortcuts import render, get_object_or_404, redirect
from .models import Band, Concert, Ticket
from django.contrib import messages

def home(request):
    bands = Band.objects.all()
    return render(request, 'home.html', {'bands': bands})

def concert_list(request, band_id):
    band = get_object_or_404(Band, id=band_id)
    concerts = band.concerts.all()
    return render(request, 'concert_list.html', {'band': band, 'concerts': concerts})

def book_ticket(request, concert_id):
    concert = get_object_or_404(Concert, id=concert_id)
    if request.method == "POST":
        buyer_name = request.POST.get("name")
        email = request.POST.get("email")
        quantity = request.POST.get("quantity")

        Ticket.objects.create(concert=concert, buyer_name=buyer_name, email=email, quantity=quantity)
        messages.success(request, "Ticket booked successfully!")
        return redirect('home')

    return render(request, 'book_ticket.html', {'concert': concert})

------------------------------------------------------------------------------------------------------------------------------------------

[10:33 pm, 03/02/2025] Arya:
 from django.urls import path
from . import views

urlpatterns = [
    path('', views.home, name='home'),
    path('band/<int:band_id>/', views.concert_list, name='concert_list'),
    path('concert/<int:concert_id>/book/', views.book_ticket, name='book_ticket'),
]

------------------------------------------------------------------------------------------------------------------------------------------

[10:33 pm, 03/02/2025] Arya:


 {% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>K-Pop Ticket Booking</title>
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center">K-Pop Bands</h1>
        <div class="row">
            {% for band in bands %}
                <div class="col-md-4 text-center">
                    <div class="card">
                        {% if band.image %}
                            <img src="{{ band.image.url }}" class="card-img-top" alt="{{ band.name }}">
                        {% endif %}
                        <div class="card-body">
                            <h5 class="card-title">{{ band.name }}</h5>
                            <p>{{ band.description }}</p>
                            <a href="{% url 'concert_list' band.id %}" class="btn btn-primary">View Concerts</a>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>
</body>
</html>
[10:34 pm, 03/02/2025] Arya:
------------------------------------------------------------------------------------------------------------------------------------------



 {% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Concerts - {{ band.name }}</title>
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center">{{ band.name }} - Concerts</h1>
        <div class="row">
            {% for concert in concerts %}
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">{{ concert.location }}</h5>
                            <p>Date: {{ concert.date }}</p>
                            <p>Price: ${{ concert.price }}</p>
                            <a href="{% url 'book_ticket' concert.id %}" class="btn btn-success">Book Now</a>
                        </div>
                    </div>
                </div>
            {% empty %}
                <p>No concerts available for this band.</p>
            {% endfor %}
        </div>
    </div>
</body>
</html>
[10:34 pm, 03/02/2025] Arya:

------------------------------------------------------------------------------------------------------------------------------------------

 {% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Book Ticket</title>
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center">Book Ticket for {{ concert.band.name }}</h1>
        <div class="card">
            <div class="card-body">
                <form method="POST">
                    {% csrf_token %}
                    <div class="mb-3">
                        <label for="name" class="form-label">Your Name</label>
                        <input type="text" name="name" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" name="email" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        <label for="quantity" class="form-label">Quantity</label>
                        <input type="number" name="quantity" class="form-control" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Book Ticket</button>
                </form>
            </div>
        </div>
    </div>
</body>
</html>

------------------------------------------------------------------------------------------------------------------------------------------

[10:34 pm, 03/02/2025] Arya: body {
    background-color: #f8f9fa;
}
.card {
    margin-top: 20px;
}

------------------------------------------------------------------------------------------------------------------------------------------
from django.db import models
from django.contrib.auth.models import User

# Create your models here.

class JewelryType(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name

# Abstract Jewelry class with a category
class Jewelry(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField()
    material = models.CharField(max_length=100)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    weight = models.DecimalField(max_digits=5, decimal_places=2)
    image = models.ImageField()
    created_at = models.DateTimeField(auto_now_add=True)
    category = models.ForeignKey(JewelryType, on_delete=models.CASCADE)


    def __str__(self):
        return self.name
    
class Cart(models.Model):
    user=models.ForeignKey(User,on_delete=models.CASCADE)    
    product=models.ForeignKey(Jewelry,on_delete=models.CASCADE)

    def __str__(self):
        return self.name
    
class Buy(models.Model):
    user=models.ForeignKey(User,on_delete=models.CASCADE)
    product=models.ForeignKey(Jewelry,on_delete=models.CASCADE)
    price=models.IntegerField()
    date=models.DateField(auto_now_add=True)   

    def __str__(self):
        return self.name  
    
class Address(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    name = models.CharField(max_length=255)
    address = models.TextField()
    phone_number = models.CharField(max_length=15)



    from django.urls import path
from . import views

urlpatterns=[
    path('login',views.shop_login),
    path('logout',views.shop_logout),
    path('register',views.register),
    path('',views.public),
#-------------------------------------------------------------------------------------------------------- for shop

    path('shop_home',views.shop_home),
    path('add_product',views.add_product),
    path('edit_pro/<id>/', views.edit_pro),
    path('delete_pro/<id>/',views.delete_pro),
    path('booking',views.bookings),
    

    path('rings/', views.ring_page, name='ring_page'),         
    path('necklaces/', views.necklace_page, name='necklace_page'), 
    path('earrings/', views.earrings_page, name='earrings_page'), 
    path('Bracelet/', views.Bracelet_page, name='Bracelet_page'), 
    
    # path('jewelry/<int:jewelry_id>/', views.jewelry_detail, name='jewelry_detail'),

#---------------------------------------------------------------------------------------------------------for user

    path('user_home',views.user_home),
    path('view_pro/<id>',views.view_pro),
    path('add_to_cart/<id>',views.add_to_cart),
    path('cart_display',views.cart_display),
    path('delete_cart/<id>',views.delete_cart),
    path('buy_pro/<id>',views.buy_pro),
    path('user_booking',views.user_view_bookings),
    path('about',views.about),
    path('search/', views.search, name='search'),
    path('buy/<id>/', views.buy_pro, name='buy_pro'),
    path('address/<id>/', views.address_page, name='address_page'),
    path('place_order/<id>/', views.place_order, name='place_order'),
    
    path('user_rings/', views.r_page, name='ring_page'),  
    path('user_necklaces/', views.n_page, name='necklace_page'), 
    path('user_earrings/', views.e_page, name='earrings_page'),  
    path('user_Bracelet/', views.b_page, name='Bracelet_page'), 



#-----------------------------------------------------------------------------------------------------------for jewels


]


from django.shortcuts import render,redirect
from django.contrib.auth import authenticate,login,logout
from . models import *
import os
from django.contrib.auth.models import User
from django.contrib import messages

from django.core.mail import send_mail
from django.conf import settings
from django.http import HttpResponse
# from django.utils import timezone
# Create your views here.

def shop_login(req):
    if 'shop' in req.session:
        return redirect(shop_home)
    if 'user' in req.session:
        return redirect(user_home)
    
    if req.method=='POST':
        uname=req.POST['uname']
        password=req.POST['password']
        data=authenticate(username=uname,password=password)
        if data:
            login(req,data)
            if data.is_superuser:
                req.session['shop']=uname
                return redirect(shop_home)
            else:
                req.session['user']=uname
                # return redirect(user_home)
        else:
            messages.warning(req,"invalid user or password")  
        return redirect(shop_login)
    else:      
        return render(req,'login.html')
    
def shop_logout(req):
    logout(req)
    req.session.flush()
    return redirect(shop_login)

def register(req):
    if req.method=='POST':
        name=req.POST['name']
        email=req.POST['email']
        password=req.POST['password']
        send_mail('Eshop registration', 'E_shop account created', settings.EMAIL_HOST_USER, [email])
        try:
            data=User.objects.create_user(first_name=name,username=email,email=email,password=password)
            data.save()
            return redirect(shop_login)
        except:
            messages.warning(req,"user details already exits.")
            return redirect(register)
    else:
        return render(req,'register.html')
    
def public(req):
    return render(req,'public.html')

    

 #------------------------------admin------------------------------------------------------------------------------------------



def shop_home(req):
    if 'shop' in req.session:
        products=Jewelry.objects.all()
        return render(req,'shop/shop_home.html',{'jewels':products})
        # return render(req,'shop/shop_home.html')
    else:
        return redirect(shop_login) 
    
def add_product(req):
    if req.method=='POST':
        name=req.POST['name']
        description=req.POST['description']
        material=req.POST['material']
        price=req.POST['price']
        weight=req.POST['weight']
        category_name = req.POST.get('JewelryType')
        file=req.FILES['img']

        try:
            category = JewelryType.objects.get(name=category_name)
        except JewelryType.DoesNotExist:
            messages.error(req, "Category does not exist!")
            return redirect('add_pro')  
        data= Jewelry.objects.create(name=name,description=description,material=material,price=price,weight=weight,image=file,category=category)
        data.save()
        return redirect(shop_home)
    return render(req,'shop/add_pro.html')   

def edit_pro(req,id):
    pro=Jewelry.objects.get(pk=id)
    if req.method=='POST':
        name=req.POST['name']
        description=req.POST['description']
        material=req.POST['material']
        price=req.POST['price']
        weight=req.POST['weight']
        # category_name = req.POST.get('JewelryType')
        file=req.get('img')
        if file:
            Jewelry.objects.filter(pk=id).update(name=name,description=description,material=material,price=price,weight=weight,img=file)
        else:
            Jewelry.objects.filter(pk=id).update(name=name,description=description,material=material,price=price,weight=weight)
        
        return redirect(ring_page)
    return render(req,'shop/edit_pro.html',{'data':pro})


def bookings(req):
    bookings=Buy.objects.all()[::-1]
    user_addresses = Address.objects.filter(user=req.user) 
    return render(req,'shop/booking.html',{'data':bookings,'user_addresses': user_addresses})

def delete_pro(req,id):
    data=Jewelry.objects.get(pk=id)
    url=data.image.url
    url=url.split('/')[-1]
    os.remove('media/'+url)
    data.delete()
    return redirect(ring_page)


#  displaying all Rings
def ring_page(request):
    ring_category = JewelryType.objects.get(name='ring') 
    rings = Jewelry.objects.filter(category=ring_category)
    return render(request, 'shop/ring_page.html', {'jewelry_items': rings})

#  displaying all Necklaces
def necklace_page(request):
    necklace_category = JewelryType.objects.get(name='necklace')
    necklaces = Jewelry.objects.filter(category=necklace_category)
    return render(request, 'shop/ring_page.html', {'jewelry_items': necklaces})

def earrings_page(request):
    earrings_category = JewelryType.objects.get(name='earrings')
    earrings = Jewelry.objects.filter(category=earrings_category)
    return render(request, 'shop/ring_page.html', {'jewelry_items': earrings })

def Bracelet_page(request):
    Bracelet_category = JewelryType.objects.get(name='Bracelet')
    Bracelet = Jewelry.objects.filter(category=Bracelet_category)
    return render(request, 'shop/ring_page.html', {'jewelry_items': Bracelet })






#-------------------------------------------------------------------------------------------------------------------------------------


def user_home(req):
    if 'user' in req.session:
        products=Jewelry.objects.all()
        return render(req,'user/user_home.html',{'product':products})

def view_pro(req,id):
    log_user=User.objects.get(username=req.session['user'])
    products=Jewelry.objects.get(pk=id)
    try:
        cart=Cart.objects.get(product=products,user=log_user)
    except:
        cart=None
    return render(req,'user/view.html',{'product':products,'cart':cart})

def add_to_cart(req,id):
    products=Jewelry.objects.get(pk=id)
    # print(products)
    user=User.objects.get(username=req.session['user'])
    # print(user)
    data=Cart.objects.create(user=user,product=products)
    data.save()
    return redirect(cart_display)

    
def cart_display(req):
    log_user=User.objects.get(username=req.session['user'])
    data=Cart.objects.filter(user=log_user)
    return render(req,'user/cart_display.html',{'data':data}) 

def delete_cart(req,id):
    data=Cart.objects.get(pk=id)
    data.delete()
    return redirect(cart_display)   


def buy_pro(req,id):
    products=Jewelry.objects.get(pk=id)
    # return redirect('address_page')
    return render(req,'user/user_dtls.html',{'product':products}) 


def address_page(req, id):
    product = Jewelry.objects.get(pk=id)
    if req.method == 'POST':
        name = req.POST.get('name')
        address = req.POST.get('address')
        phone_number = req.POST.get('phone_number')
        
        # Save the address
        user_address = Address.objects.create(user=req.user, name=name, address=address, phone_number=phone_number)

        # Convert price to integer if needed
        price = int(product.price)  # Convert the price to an integer before saving
        # Save the purchase
        data = Buy.objects.create(user=req.user, product=product, price=price)

        return redirect('user_home')  # Adjust the redirect URL as necessary

    return render(req, 'user/user_dtls.html', {'product': product})
def place_order(req, id):
    product = Jewelry.objects.get(pk=id)
    user = req.user  # Using req.user directly
    price = int(product.price)  # Convert the price to an integer before saving
    data = Buy.objects.create(user=user, product=product, price=price)
    
    return redirect(user_home)  # Adjust the redirect URL as necessary





def user_view_bookings(req):
    user=User.objects.get(username=req.session['user'])
    data=Buy.objects.filter(user=user)
    return render(req,'user/view_booking.html',{'data':data})

def about(req):
    return render(req,'user/about.html')

def search(req):
    if req.method == 'POST':
        searched = req.POST.get('searched', '')  
        results = Jewelry.objects.filter(name__icontains=searched) if searched else []
        return render(req, 'user/search.html', {'searched': searched, 'results': results})
    else:
        return render(req, 'user/search.html', {'searched': '', 'results': []})   


#  displaying all Rings
def r_page(request):
    ring_category = JewelryType.objects.get(name='ring') 
    rings = Jewelry.objects.filter(category=ring_category)
    return render(request, 'user/r_page.html', {'jewelry_items': rings})
#  displaying all necklace
def n_page(request):
    necklace_category = JewelryType.objects.get(name='necklace')
    necklaces = Jewelry.objects.filter(category=necklace_category)
    return render(request, 'user/r_page.html', {'jewelry_items': necklaces})
#  displaying all earrings
def e_page(request):
    earrings_category = JewelryType.objects.get(name='earrings')
    earrings = Jewelry.objects.filter(category=earrings_category)
    return render(request, 'user/r_page.html', {'jewelry_items': earrings })

def b_page(request):
    Bracelet_category = JewelryType.objects.get(name='Bracelet')
    Bracelet = Jewelry.objects.filter(category=Bracelet_category)
    return render(request, 'user/r_page.html', {'jewelry_items': Bracelet })


#------------------------------------------------
from django.shortcuts import render, redirect
from django.http import HttpResponse
from .models import Concert, Ticket
from django.contrib import messages

def book_ticket(request, concert_id):
    try:
        # Manually fetch the concert
        concert = Concert.objects.get(id=concert_id)
    except Concert.DoesNotExist:
        # If the concert does not exist, handle it gracefully (e.g., redirect to an error page or home page)
        messages.error(request, "Concert not found.")
        return redirect('concert_list')  # Redirect to the list of concerts or a custom error page

    if request.method == "POST":
        # Get the form data from the POST request
        name = request.POST.get("name")
        email = request.POST.get("email")
        quantity = int(request.POST.get("quantity"))

        # Check if the concert has enough tickets available
        if quantity > concert.total_ticket:
            messages.error(request, f"Only {concert.total_ticket} tickets are available.")
            return redirect('book_ticket', concert_id=concert_id)
        
        # Calculate the total price
        total_price = concert.price * quantity

        # Create a Ticket object
        Ticket.objects.create(
            concert=concert,
            buyer_name=name,
            email=email,
            quantity=quantity
        )
        
        # Update the concert's remaining tickets
        concert.total_ticket -= quantity
        concert.save()

        # Optionally, you can redirect to a success page or show a confirmation message
        messages.success(request, f"Your ticket(s) have been booked successfully! Total Price: ${total_price}")
        return redirect('concert_list')  # Redirect to the concert list page, or any other page
    
    return render(request, 'user/book_ticket.html', {'concert': concert})



from django.urls import path
from . import views

urlpatterns = [
    path('concerts/<int:concert_id>/book/', views.book_ticket, name='book_ticket'),
    # Other URLs for listing concerts, etc.
]


{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Book Ticket for {{ concert.band.name }}</title>
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center">Book Ticket for {{ concert.band.name }}</h1>
        <div class="card">
            <div class="card-body">
                <form method="POST">
                    {% csrf_token %}
                    <div class="mb-3">
                        <label for="name" class="form-label">Your Name</label>
                        <input type="text" name="name" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" name="email" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        <label for="quantity" class="form-label">Quantity</label>
                        <input type="number" name="quantity" class="form-control" id="quantity" value="1" min="1" max="{{ concert.total_ticket }}" required>
                    </div>
                    <p>Total Price: $<span id="total-price">{{ concert.price }}</span></p>
                    <button type="submit" class="btn btn-primary">Book Ticket</button>
                </form>
            </div>
        </div>
    </div>

    <script>
        // JavaScript to dynamically update the total price based on quantity
        document.getElementById('quantity').addEventListener('input', function() {
            const price = {{ concert.price }};  // Price per ticket
            const quantity = this.value;  // Selected quantity
            const totalPrice = price * quantity;  // Calculate the total price
            document.getElementById('total-price').innerText = totalPrice;  // Update the total price display
        });
    </script>
</body>
</html>









<!DOCTYPE html>
<html>
<style>
body {font-family: Arial, Helvetica, sans-serif;}
* {box-sizing: border-box;}

/* Full-width input fields */
input[type=text], input[type=password] {
  width: 100%;
  padding: 15px;
  margin: 5px 0 22px 0;
  display: inline-block;
  border: none;
  background: #f1f1f1;
}

/* Add a background color when the inputs get focus */
input[type=text]:focus, input[type=password]:focus {
  background-color: #ddd;
  outline: none;
}

/* Set a style for all buttons */
button {
  background-color: #04AA6D;
  color: white;
  padding: 14px 20px;
  margin: 8px 0;
  border: none;
  cursor: pointer;
  width: 100%;
  opacity: 0.9;
}

button:hover {
  opacity:1;
}

/* Extra styles for the cancel button */
.cancelbtn {
  padding: 14px 20px;
  background-color: #f44336;
}

/* Float cancel and signup buttons and add an equal width */
.cancelbtn, .signupbtn {
  float: left;
  width: 50%;
}

/* Add padding to container elements */
.container {
  padding: 16px;
}

/* The Modal (background) */
.modal {
  display: none; /* Hidden by default */
  position: fixed; /* Stay in place */
  z-index: 1; /* Sit on top */
  left: 0;
  top: 0;
  width: 100%; /* Full width */
  height: 100%; /* Full height */
  overflow: auto; /* Enable scroll if needed */
  background-color: #474e5d;
  padding-top: 50px;
}

/* Modal Content/Box */
.modal-content {
  background-color: #fefefe;
  margin: 5% auto 15% auto; /* 5% from the top, 15% from the bottom and centered */
  border: 1px solid #888;
  width: 80%; /* Could be more or less, depending on screen size */
}

/* Style the horizontal ruler */
hr {
  border: 1px solid #f1f1f1;
  margin-bottom: 25px;
}
 
/* The Close Button (x) */
.close {
  position: absolute;
  right: 35px;
  top: 15px;
  font-size: 40px;
  font-weight: bold;
  color: #f1f1f1;
}

.close:hover,
.close:focus {
  color: #f44336;
  cursor: pointer;
}

/* Clear floats */
.clearfix::after {
  content: "";
  clear: both;
  display: table;
}

/* Change styles for cancel button and signup button on extra small screens */
@media screen and (max-width: 300px) {
  .cancelbtn, .signupbtn {
     width: 100%;
  }
}
</style>
<body>

<h2>Modal Signup Form</h2>

<button onclick="document.getElementById('id01').style.display='block'" style="width:auto;">Sign Up</button>

<div id="id01" class="modal">
  <span onclick="document.getElementById('id01').style.display='none'" class="close" title="Close Modal">&times;</span>
  <form class="modal-content" action="/action_page.php">
    <div class="container">
      <h1>Sign Up</h1>
      <p>Please fill in this form to create an account.</p>
      <hr>
      <label for="email"><b>Email</b></label>
      <input type="text" placeholder="Enter Email" name="email" required>

      <label for="psw"><b>Password</b></label>
      <input type="password" placeholder="Enter Password" name="psw" required>

      <label for="psw-repeat"><b>Repeat Password</b></label>
      <input type="password" placeholder="Repeat Password" name="psw-repeat" required>
      
      <label>
        <input type="checkbox" checked="checked" name="remember" style="margin-bottom:15px"> Remember me
      </label>

      <p>By creating an account you agree to our <a href="#" style="color:dodgerblue">Terms & Privacy</a>.</p>

      <div class="clearfix">
        <button type="button" onclick="document.getElementById('id01').style.display='none'" class="cancelbtn">Cancel</button>
        <button type="submit" class="signupbtn">Sign Up</button>
      </div>
    </div>
  </form>
</div>

<script>
// Get the modal
var modal = document.getElementById('id01');

// When the user clicks anywhere outside of the modal, close it
window.onclick = function(event) {
  if (event.target == modal) {
    modal.style.display = "none";
  }
}
</script>

</body>
</html>








<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ticket Design</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f4f4f4;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .ticket {
            width: 300px;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            position: relative;
            font-size: 16px;
            color: #333;
        }

        /* Ticket top section */
        .ticket-header {
            background-color: #0072ff;
            color: white;
            padding: 20px;
            text-align: center;
        }

        .ticket-header h2 {
            margin: 0;
            font-size: 22px;
        }

        /* Ticket body section */
        .ticket-body {
            padding: 20px;
        }

        .ticket-body .info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .ticket-body .info span {
            font-weight: bold;
        }

        /* Ticket footer section */
        .ticket-footer {
            background-color: #f1f1f1;
            padding: 15px;
            text-align: center;
        }

        .ticket-footer .footer-text {
            font-size: 14px;
            color: #777;
        }

        /* Ticket border and perforations */
        .ticket:before {
            content: '';
            position: absolute;
            top: -20px;
            left: 0;
            width: 100%;
            height: 10px;
            background-color: #0072ff;
            border-radius: 10px;
        }

        .ticket:after {
            content: '';
            position: absolute;
            bottom: -20px;
            left: 0;
            width: 100%;
            height: 10px;
            background-color: #0072ff;
            border-radius: 10px;
        }

        .ticket-footer::before {
            content: '';
            position: absolute;
            top: 10px;
            left: 10px;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background-color: #0072ff;
        }

        .ticket-footer::after {
            content: '';
            position: absolute;
            top: 10px;
            right: 10px;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background-color: #0072ff;
        }
    </style>
</head>
<body>

    <div class="ticket">
        <div class="ticket-header">
            <h2>Event Ticket</h2>
        </div>
        <div class="ticket-body">
            <div class="info">
                <span>Event Name:</span><span>Concert</span>
            </div>
            <div class="info">
                <span>Date:</span><span>March 25, 2025</span>
            </div>
            <div class="info">
                <span>Time:</span><span>7:00 PM</span>
            </div>
            <div class="info">
                <span>Location:</span><span>Stadium A</span>
            </div>
        </div>
        <div class="ticket-footer">
            <p class="footer-text">Scan to Enter</p>
        </div>
    </div>

</body>
</html>




add to cart 
<form method="POST" action="{% url 'add_to_cart' id=product.id %}">
    {% csrf_token %}
    <button type="submit">Add to Cart</button>
  </form>
  from django.shortcuts import render
  from .models import Cart
  
  def cart_display(req):
      user = User.objects.get(username=req.session['user'])
      cart_items = Cart.objects.filter(user=user)  # Fetch cart items for the user
      return render(req, 'shop/cart_display.html', {'cart_items': cart_items})
      <h2>Your Cart</h2>
      {% if cart_items %}
        <ul>
          {% for item in cart_items %}
            <li>{{ item.product.name }} - Quantity: {{ item.quantity }} - Price: ${{ item.product.price }}</li>
          {% endfor %}
        </ul>
        <button>Proceed to Checkout</button>
      {% else %}
        <p>Your cart is empty.</p>
      {% endif %}
          